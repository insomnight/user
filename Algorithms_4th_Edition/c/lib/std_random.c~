/*
 * 标准的随机数库实现
 * 功能: 简化c标准库的生成随机数操作
 */
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include "std_random.h"

/*
 * 通过时间来作为随机数生成算法种子
 */
void setSeedByTime(void)
{
    srand((unsigned int) time(0));
    //刷新一下，防止种子在一时间第一个数比较接近
    rand();
}

/*
 * 设置伪随机数生成算法种子
 */
void setSeed(unsigned int seed)
{
    srand(seed);
    rand();
}

/*
 * Return a random real number uniformly in [0,1).
 * Returns: a random real number uniformly in [0,1).
 */
double uniformDouble()
{
    int rand_num = rand();
    return (double) rand_num / ((double) RAND_MAX + 1) ;
}

/*
 * Returns a random real number uniformly in [a,b).
 * Params: low   - the left endpoint
 *         hight - the right endpoint
 * Returns: a random real number uniformly in [a,b)
 * Throws: IllegalArgumentRxception - unless a < b
 */
double uniformDoubleL2H(double low,double hight)
{
    if(low >= hight)
    {
        fprintf(stderr,"invalid range: [ \"%lf\", \"%lf\")",low,hight);
        exit(EXIT_FAILURE);
    }
    return low + uniformDouble() * (hight - low);
}

/*
 * returns a random integer uniformly in [0,n).
 * params: n - number of possible integers
 * return: a random integer uniformly between 0 (inclusive) and n (exclusive)
 */
int uniformInt(int n)
{
    if(n <= 0)
    {
        fprintf(stderr,"argument must be positive: %d\n",n);
        exit(EXIT_FAILURE);
    }
    int result;
    result = rand() % n;
    return result;
}

/*
 * Rearranges the elements of the specified array in uniformly random order
 * params: a - the array to shuffle
 */
void shuffleDoubles(double a[],int n)
{
    int r;
    double temp;
    for(int i = 0; i < n; i++)
    {
        r = i + uniformInt( n - i );
        temp = a[i];
        a[i] = a[r];
        a[r] = temp;
    }
}

/*
 * Rearranges the elements of the specified array in uniformly random order
 * params: a - the array to shuffle
 */
void shuffleInts(int a[],int n)
{
    int r;
    int temp;
    for(int i = 0; i < n; i++)
    {
        r = i + uniformInt( n - i );
        temp = a[i];
        a[i] = a[r];
        a[r] = temp;
    }
}

/**
 * returns a random boolean from Bernoulli distribution with success probability p.
 * params: p - the probability of returning true
 * returns: 1 with probability p and 0 with probability 1 - p;
 * Threows: IlleagelArgumentException - unless 0 <= p <= 1.0
 */ 
int bernoulli(double p)
{
    if(!(p>= 0.0 && p <= 1.0))
    {
        fprintf(stderr,"probability p must be between 0.0 and 1.0: %lf",p);
        exit(EXIT_FAILURE);
    }
    return uniformDouble() < p; 
}

/**
 * Returns a random integer uniformly in [a,b).
 * Params: l - the left endpoint
 * Params: b - the right endpoint
 * Returns: a random integer uniformly in [a,b)
 */
int uniformIntL2H(int l,int h)
{
    if((b <= a))
    {

}
