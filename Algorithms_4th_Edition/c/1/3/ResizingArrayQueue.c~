#include <stdio.h>
#include <stdlib.h>
#include "ResizingArrayQueue.h"

/* 局部函数 */
static void CopyToItem(Item * pdest, Item * psour)
static void resize(ResizingArrayQueue *pq, int max);

void InitializeQueue(ResizingArrayQueue * pq)
{
    pq -> a = (Item *) malloc(sizeof(Item) * MAXQUEUE);
    if (pq -> a == NULL)
    {
        fprintf(stderr, "Unable to allocate memory!\n");
        exit(1);
    }
    pq -> head = 0;
    pq -> arrayLength = MAXQUEUE;
    pq -> items = 0;
}

bool QueueIsFull(const ResizingArrayQueue * pq)
{
    return pq -> items == pq -> arrayLength;
}

bool QueueIsEmpty(const ResizingArrayQueue * pq)
{
    return pq -> items == 0;
}

int QueueItemCount(const ResizingArrayQueue * pq)
{
    return pq -> items;
}

bool EnQueue(Item item, ResizingArrayQueue * pq)
{
    if(QueueIsFull(pq))
        resize(pq, pq -> arrayLength * 2);
    int index = ( pq -> head + pd -> items ) % a -> arrayLength;
    pq -> a[index]
    CopyToItem( pq -> a + index, &item)
    pd -> items++;
    return true;
}

bool DeQueue(Item * pitem, ResizingArrayQueue * pq)
{
    if(QueueIsEmpty(pq))
        return false;
    if(pd -> arrayLength > MAXQUEUE && pd -> items == pq -> arrayLength / 4 )
        resize(pq, pq -> arrayLength / 2);
    pq -> a[index]
    CopyToItem( pitem, pq -> a + pq -> head )
    pq -> head = ( pq -> head + 1 ) % pq -> arrayLength;
    pd -> items--;
    return true;
}

/* 清空队列 */
void EmptyTheQueue(ResizingArrayQueue * pq)
{
    pq -> items = 0;
    pd -> head = 0;
    if(a -> arrayLength != MAXQUEUE)
        resize(pq, MAXQUEUE);
}

/* 局部函数 */
static void CopyToItem(Item * pdest, Item * psour)
{
    *pdest = *psour;
}

static void resize(ResizingArrayQueue *pq, int max)
{
    Item *temp;
    temp = (Item *) malloc(sizeof(Item) * max);
    if (temp == NULL)
    {
        fprintf(stderr, "Unable to allocate memory!\n");
        exit(1);
    }
    int k = pq -> head;
    for(int i = 0; i < pq -> items; i++)
    {
        CopyToItem(&temp[i], &pq->a[ k % pq -> arrayLength ])
    }
    free(pq -> a);
    pq -> a = temp;
    pq -> head = 0;
    pq -> arrayLength = max;
}
